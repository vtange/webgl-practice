<!DOCTYPE html>
<html>
<head>
    <title>Babylon.js</title>
    <script src="js/babylon.js"></script>
     
    <!-----------------
        Normal
        ---------------->
    <!--
    <script type="application/vertexShader" id="vertexShaderCode">
        precision highp float;
 
        // Attributes
        attribute vec3 position;
        attribute vec2 uv;
 
        // Uniforms
        uniform mat4 worldViewProjection;
 
        // Normal
        varying vec2 vUV;
 
        void main(void) {
            gl_Position = worldViewProjection * vec4(position, 1.0);
    
            vUV = uv;
        }
    </script>
    -->
    <!-----------------
        Cell Shading
        ---------------->
    <script src="" type="application/vertexShader" id="vertexShaderCode">
        precision highp float;
        
        // Attributes
        attribute vec3 position;
        attribute vec3 normal;
        attribute vec2 uv;
        
        // Uniforms
        uniform mat4 world;
        uniform mat4 worldViewProjection;
        
        // Varying
        varying vec3 vPositionW;
        varying vec3 vNormalW;
        varying vec2 vUV;
        
        void main(void) {
            vec4 outPosition = worldViewProjection * vec4(position, 1.0);
            gl_Position = outPosition;
        
            vPositionW = vec3(world * vec4(position, 1.0));
            vNormalW = normalize(vec3(world * vec4(normal, 0.0)));
        
            vUV = uv;
        }
    </script>
    <!-----------------
        Cell Shading
        ---------------->
    <script type="application/fragmentShader" id="fragmentShaderCode">
        precision highp float;
        
        // Lights
        varying vec3 vPositionW;
        varying vec3 vNormalW;
        varying vec2 vUV;
        
        // Refs
        uniform sampler2D textureSampler;
        
        void main(void) {
            float ToonThresholds[4];
            ToonThresholds[0] = 0.95;
            ToonThresholds[1] = 0.5;
            ToonThresholds[2] = 0.2;
            ToonThresholds[3] = 0.03;
        
            float ToonBrightnessLevels[5];
            ToonBrightnessLevels[0] = 1.0;
            ToonBrightnessLevels[1] = 0.8;
            ToonBrightnessLevels[2] = 0.6;
            ToonBrightnessLevels[3] = 0.35;
            ToonBrightnessLevels[4] = 0.2;
        
            // Light
            vec3 vLightPosition = vec3(10, 10, -5);
            vec3 lightVectorW = normalize(vLightPosition - vPositionW);
        
            // diffuse
            float ndl = max(0., dot(vNormalW, lightVectorW));
        
            vec3 color = texture2D(textureSampler, vUV).rgb;
        
            if (ndl > ToonThresholds[0])
            {
                color *= ToonBrightnessLevels[0];
            }
            else if (ndl > ToonThresholds[1])
            {
                color *= ToonBrightnessLevels[1];
            }
            else if (ndl > ToonThresholds[2])
            {
                color *= ToonBrightnessLevels[2];
            }
            else if (ndl > ToonThresholds[3])
            {
                color *= ToonBrightnessLevels[3];
            }
            else
            {
                color *= ToonBrightnessLevels[4];
            }
        
            gl_FragColor = vec4(color, 1.);
        }
    </script>
    <!-----------------
        Texture Wrap w/ Color
        ---------------->
    <!--
    <script type="application/fragmentShader" id="fragmentShaderCode">
        precision highp float;
        varying vec2 vUV;
 
        uniform sampler2D textureSampler;
 
        void main(void) {
            gl_FragColor = texture2D(textureSampler, vUV);
        }
    </script>
    -->

    <!-----------------
        Texture Wrap w/ Black and White override
        ---------------->
    <!--
     <script type="application/fragmentShader" id="fragmentShaderCode">
        precision highp float;
        
        varying vec2 vUV;
        
        uniform sampler2D textureSampler;
        
        void main(void) {
            float luminance = dot(texture2D(textureSampler, vUV).rgb, vec3(0.3, 0.59, 0.11));
            gl_FragColor = vec4(luminance, luminance, luminance, 1.0);
        }
    </script>
    -->
    <script src="js/index.js"></script>
    <style>
        html, body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            overflow: hidden;
            margin: 0px;
            overflow: hidden;
        }
 
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
            -ms-touch-action: none;
        }
    </style>
</head>
<body>
    <canvas id="renderCanvas"></canvas>
</body>
</html>